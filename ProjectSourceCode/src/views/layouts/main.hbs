{{>header}}

<div class="non-header">

    <script>
        {{#if user.progress}}
            var internal_progress_counter = {{user.progress}};
        {{else}}
            var internal_progress_counter = null;
        {{/if}}
        var current_active_item = null;
        const pickupable_item_ids=["carrot","key","cookie_cutter","cookies",
        "flour","sugar","butter","antlers",
        "mistletoe","lucky_star","christmas_lights","wreath","potion"];

        // item id :[item id of object to click to activate, [function to call on click]]
        const item_activation_dict={ 
            "carrot":["snowman",["show('complete_carrot_nose')","show('key')"]], 
            "key":["lock_closed",["hide('lock_closed')","show('lock_open')","show_3b()"]], 
            "cookie_cutter":["cookie_dough", ["show('cookie_cutouts')","show('pan')","hide('oven_door')","show('cookies')"]],
            "sugar":["dough_bowl",["increment_dough_counter()"]],
            "butter":["dough_bowl",["increment_dough_counter()"]],
            "flour":["dough_bowl",["increment_dough_counter()"]],
            "antlers":["cauldron",["increment_potion_counter()"]],
            "mistletoe":["cauldron",["increment_potion_counter()"]],
            "lucky_star":["cauldron",["increment_potion_counter()"]],
            "cookies":["cauldron",["increment_potion_counter()"]],
            "potion":["small_tree",["hide('small_tree')","show('complete_christmas_tree')"]],
            "christmas_lights":["house",["show('complete_christmas_lights')"]],
            "wreath":["house",["show('complete_wreath')"]]
        };

        function hide(id){
            elements = document.querySelectorAll(`[id=${id}]`);
            elements.forEach((found_item)=>{ //In case there are multiple of the same item shown across many scenes (for example scene 3 & scene3b)
                found_item.style.visibility = "hidden";
                axios.patch("update_item_visibility", {
                    new_visibility_state : 'hidden',
                    object_name : id
                })
                .then((response) => {
                    console.log("Visibility for ", id, " updated to hidden.")
                })
                .then((error) => console.log(error));
            });
            //TODO: update database with item id as the item name, and set it to hidden
        }

        function show(id){
            elements = document.querySelectorAll(`[id=${id}]`); 
            elements.forEach((found_item)=>{
                found_item.style.visibility = "visible";
                axios.patch("update_item_visibility", {
                    new_visibility_state : 'visible',
                    object_name : id
                })
                .then((response) => {
                    console.log("Visibility for ", id, " updated to visible.")
                })
                .then((error) => console.log(error));
            });
            //TODO: update database
        }

        /*             
                -increment_cookie_in_pan()
                    : 

                -increment_cookie_cutout()
                    : 

                -increment_potion_counter() 
                    : 
                        -add 1 to the internal counter, once the counter reaches 3, show potion_steam and potion 
                        -change the '0/3' potion_counter_text to reflect counter */
        
        function show_2b(){
            show("scene2_b");
            document.getElementById("scene2").style.visibility = "hidden";

        }

        function show_3b(){
            show("scene3_b"); 
            document.getElementById("scene3").style.visibility = "hidden";

        }

        function increment_dough_counter(){
            dough_counter = document.getElementById('dough_counter_text'); //Text that says '0/3' initially.
            counter = dough_counter.textContent[0]; 
            counter++;
            dough_counter.textContent = counter+"/3";
            if (counter ==1) {
                show('dough_in_bowl');
            }
            if(counter == 3){
                show_2b();
            } else {
                //Update counter in database
                axios.patch("update_item_visibility", {
                    new_visibility_state : 'hidden',
                    object_name : `dough_counter${counter-1}`
                })
                .then((response) => {})
                .then((error) => console.log(error));

                axios.patch("update_item_visibility", {
                    new_visibility_state : 'visible',
                    object_name : `dough_counter${counter}`
                })
                .then((response) => { })
                .then((error) => console.log(error));
            }
        }

        function increment_potion_counter(){
            potion_counter = document.getElementById('potion_counter_text'); //Text that says '0/3' initially.
            counter = potion_counter.textContent[0]; 
            counter++;
            potion_counter.textContent = counter+"/4";
            if (counter ==1) {
                show('potion_steam');
            }
            if(counter == 4){
                show('potion');
            }

            //Update counter in database
            axios.patch("update_item_visibility", {
                new_visibility_state : 'hidden',
                object_name : `potion_counter${counter-1}`
            })
            .then((response) => {})
            .then((error) => console.log(error));

            axios.patch("update_item_visibility", {
                new_visibility_state : 'visible',
                object_name : `potion_counter${counter}`
            })
            .then((response) => { })
            .then((error) => console.log(error));
        }
 
        function pickup(id) {
            hide(id);
            current_active_item = id;
            axios.patch('/update_item_status', {
                item_name: id,
                new_status: 'found'
            })
            .then(response => {
                // changing inventory to show the item as 'found'
                const inventoryItem = document.querySelector(`.item img[alt='${id}']`)?.parentElement;
                if (inventoryItem) {
                inventoryItem.classList.add('found');
                inventoryItem.classList.remove('unknown');
                } else {
                console.error(`Inventory item with alt='${id}' not found.`);
                }
            })
            .catch(error => console.error(error));
        }

        function update_progress(id){
            axios.post("update_is_solved", {
                name : id
            })
            .then((response) => {
                internal_progress_counter++;
                document.getElementById("progress_display").textContent = internal_progress_counter.toString()+"/13";
                if (internal_progress_counter == 13){
                    window.location.reload(); //reloading redirects to the 'game_complete' display screen
                }
            })
            .then((error) => console.log(error));
        }

        function load_items(){
            //changing all inventory items:
            for (let i in pickupable_item_ids){
                var elements = null;
                try{
                    elements = document.querySelectorAll(`[id=${pickupable_item_ids[i]}]`);
                }catch(error){} 

                if(elements){
                    elements.forEach((selectable_item)=>{ //in case there are several items with the same id, for example in scene 3 and scene 3b.
                        selectable_item.addEventListener("click", () => {
                            pickup(pickupable_item_ids[i]); 
                        });
                        selectable_item.classList.add('glow-effect');
                    });

                }
            }
            
            for (let key in item_activation_dict){

                //check if the item in the scene
                var puzzle = null;
                try{
                    puzzle = document.getElementById(item_activation_dict[key][0])
                }catch(error){}

                //if in current page, add an event listener:
                if(puzzle){
                    puzzle.addEventListener("click", (event) => {
                        if (current_active_item == key) {
                            for (let index in item_activation_dict[key][1]) { 
                                eval(item_activation_dict[key][1][index]);
                            }
                            update_progress(key);

                            // make 'disabled' in db && inventory
                            axios.patch("update_item_status", {
                                item_name: key,
                                new_status: "disabled"
                            })
                            .then((response) => {
                                // updating the inventory
                                const inventoryItem = document.querySelector(`.item img[alt='${key}']`).parentElement;
                                if (inventoryItem) {
                                    inventoryItem.classList.add('disabled');
                                    inventoryItem.classList.remove('active');
                                    inventoryItem.classList.remove('found');
                                }
                            })
                            .catch((error) => console.log(error));

                            // reset the current active item since it's used up, now null
                            current_active_item = null;
                        }
                    });
                }
            }
            
        }    
    </script>

    {{{body}}}

    {{> inventory}}

    <script>
        load_items();
    </script>
</div>

{{>footer}}