{{>header}}

<!--TODO: there's currently an issue with axios sending several requests at once... this is not working. Options are:
    - figure out how to get async/await working
    - use cookies to store all of this data, & a save button? -->

<div class="non-header">

    <script>
        var current_active_item = null;
        const pickupable_item_ids=["carrot","key","cookie_cutter","cookies",
        "flour","sugar","butter","antlers",
        "mistletoe","lucky_star","christmas_lights","wreath","potion"];

        // item id :[item id of object to click to activate, [function to call on click]]
        const item_activation_dict={ 
            "carrot":["snowman",["show('complete_carrot_nose')","show('key')"]], 
            "key":["lock_closed",["hide('lock_closed')","show('lock_open')","show_3b()"]], 
            "cookie_cutter":["cookie_dough", ["show('cookie_cutouts')","show('pan')","hide('oven_door')","show('cookies')"]],
            "sugar":["dough_bowl",["increment_dough_counter()"]],
            "butter":["dough_bowl",["increment_dough_counter()"]],
            "flour":["dough_bowl",["increment_dough_counter()"]],
            "antlers":["cauldron",["increment_potion_counter()"]],
            "mistletoe":["cauldron",["increment_potion_counter()"]],
            "lucky_star":["cauldron",["increment_potion_counter()"]],
            "cookies":["cauldron",["increment_potion_counter()"]],
            "potion":["small_tree",["hide('small_tree')","show('complete_christmas_tree')"]],
            "christmas_lights":["house",["show('complete_christmas_lights')"]],
            "wreath":["house",["show('complete_wreath')"]]
        };

        function hide(id){
            elements = document.querySelectorAll(`[id=${id}]`);
            elements.forEach((found_item)=>{ //In case there are multiple of the same item shown across many scenes (for example scene 3 & scene3b)
                found_item.style.visibility = "hidden";
            });
            //TODO: update database with item id as the item name, and set it to hidden
        }

        function show(id){
            elements = document.querySelectorAll(`[id=${id}]`); 
            elements.forEach((found_item)=>{
                found_item.style.visibility = "visible";
            });
            //TODO: update database
        }

        /*             
                -increment_cookie_in_pan()
                    : 

                -increment_cookie_cutout()
                    : 

                -increment_potion_counter() 
                    : 
                        -add 1 to the internal counter, once the counter reaches 3, show potion_steam and potion 
                        -change the '0/3' potion_counter_text to reflect counter */
        
        function show_2b(){
            show("scene2_b");
            document.getElementById("scene2").style.visibility = "hidden";

        }

        function show_3b(){
            show("scene3_b"); 
            document.getElementById("scene3").style.visibility = "hidden";

        }

        function increment_dough_counter(){
            dough_counter = document.getElementById('dough_counter_text'); //Text that says '0/3' initially.
            counter = dough_counter.textContent[0]; 
            counter++;
            dough_counter.textContent = counter+"/3";
            if (counter ==1) {
                show('dough_in_bowl');
            }
            if(counter == 3){
                show_2b();
            }
        }

        function increment_potion_counter(){
            potion_counter = document.getElementById('potion_counter_text'); //Text that says '0/3' initially.
            counter = potion_counter.textContent[0]; 
            counter++;
            potion_counter.textContent = counter+"/4";
            if (counter ==1) {
                show('potion_steam');
            }
            if(counter == 4){
                show('potion');
            }
        }
 
        function pickup(id){
            hide(id);
            current_active_item = id;
            axios.patch("update_item_status", {
                item_name:id,
                new_status:"found"
            })
            .then((response) => {
                //console.log(response.data);
                //INVENTORY TODO: update inventory here, make the item 'found'!
            })
            .then((error) => console.log(error));
        }

        function update_progress(id){
            axios.post("update_is_solved", {
                name : id
            })
            .then((response) => console.log(response))
            .then((error) => console.log(error));
        }

        function load_items(){
            //Make all inventory items pickupable:
            for (let i in pickupable_item_ids){
                var elements = null;
                try{
                    elements = document.querySelectorAll(`[id=${pickupable_item_ids[i]}]`);
                }catch(error){} 

                if(elements){
                    elements.forEach((selectable_item)=>{ //in case there are several items with the same id, for example in scene 3 and scene 3b.
                        selectable_item.addEventListener("click", () => {
                            pickup(pickupable_item_ids[i]); 
                        });
                        selectable_item.classList.add('glow-effect');
                    });

                }
            }
            
            //Make all puzzles work:
            for (let key in item_activation_dict){

                //Check if the item's in the scene:
                var puzzle = null;
                try{
                    puzzle = document.getElementById(item_activation_dict[key][0])
                }catch(error){}

                //If it's in the scene, add an event listener for clicking on the puzzle:
                if(puzzle){
                    puzzle.addEventListener("click", (event) => {
                        if (current_active_item == key){ //If the user has the correct item to solve the puzzle:
                            //Call all the functions that happen when the puzzle is solved:
                            for (let index in item_activation_dict[key][1]){ 
                                eval(item_activation_dict[key][1][index]);
                            }
                            update_progress(key);

                            //INVENTORY TODO: update the inventory status of the item with the 'key' id to be 'disabled', 
                            //then update the database with this new status.
                        }
                    });
                }
            }
            
        }    
    </script>

    {{{body}}}

    {{> inventory}}

    <script>
        load_items();
    </script>
</div>

{{>footer}}