{{>header}}


<div class="non-header">

    <script>
        /*
            var scene_1_visible_items={
            "antlers":"visible",
            "complete_carrot_nose":"hidden",
            "complete_christmas_lights":"hidden",
            "complete_wreath":"hidden",
            "key":"hidden",
            "flour":"visible",
            "christmas_lights":"visible"
            }
            var scene_2_visible_items={
                "dough_in_bowl":"hidden",
                "carrot":"visible",
                "butter":"visible",
                "sugar":"visible"
            }
            var scene_2b_visible_items={
                "cookie_cutout_1":"hidden",
                "cookie_cutout_2":"hidden",
                "cookie_cutout_3":"hidden",
                "cookie_cutout_4":"hidden",
                "cookie_in_pan_1":"hidden",
                "cookie_in_pan_2":"hidden",
                "cookie_in_pan_3":"hidden",
                "cookie_in_pan_4":"hidden",
                "pan":"hidden",
                "oven_door":"visible",
            }
            var scene_3_visible_items={
                "lock_open":"hidden",
                "lock_closed":"visible",
                "cookie_cutter":"visible",
                "mistletoe":"visible"
            }
            var scene_3_b_visible_items={
                "potion_steam":"hidden", //Just for aesthetic purposes, shows the cauldron bubbling when the potion is complete.
                "potion":"hidden",
                "cookie_cutter":"visible",
                "mistletoe":"visible"
            }
            var scene_4_visible_items={
                "small_tree":"visible",
                "lucky_star":"visible",
                "complete_christmas_tree":"hidden",
                "wreath":"visible"
            }*/

        var current_active_item = "wreath";
        const pickupable_item_ids=["carrot","key","cookie_cutter",
        "flour","sugar","butter","antlers",
        "mistletoe","lucky_star","christmas_lights","wreath","potion"];
        //"uncooked_cookies","cooked_cookies",
        // "key":["lock_closed",[show('lock_open')]], 
        // item id :[item id of object to click to activate, [function to call on click]]

        // since this is static and never changes, doesn't need to be in the db
        const item_activation_dict={ 
            "carrot":["snowman",["show('complete_carrot_nose')","show('key')"]], 
            "key":["lock_closed",["hide('lock_closed')","show('lock_open')"]], 
            "cookie_cutter":["cookie_dough", ["increment_cookie_cutout()"]],
            "uncooked_cookies":["pan", ["increment_cookie_in_pan()"]],
            "sugar":["dough_bowl",["increment_dough_counter()"]],
            "butter":["dough_bowl",["increment_dough_counter()"]],
            "flour":["dough_bowl",["increment_dough_counter()"]],
            "antlers":["cauldron",["increment_potion_counter()"]],
            "mistletoe":["cauldron",["increment_potion_counter()"]],
            "lucky_star":["cauldron",["increment_potion_counter()"]],
            "potion":["small_tree",["hide('small_tree')","show('complete_christmas_tree')"]],
            "christmas_lights":["house",["show('complete_christmas_lights')"]],
            "wreath":["house",["show('complete_wreath')"]]
        };

        function hide(id){
            document.getElementById(id).style.visibility = "hidden";
            //TODO: update database
        }

        function show(id){
            document.getElementById(id).style.visibility = "visible";
            //TODO: update database
        }

        function pickup(id){
            hide(id);
            current_active_item = id;
            axios.patch("update_item_status", {
                item_name:id,
                new_status:"found"
            })
            .then((response) => {
                console.log(response.data);
                //INVENTORY TODO: update inventory here, make the item 'found'!
            })
            .then((error) => console.log(error));
        }

        function update_progress(id){
            axios.post("update_is_solved", {
                name : id
            })
            .then((response) => console.log(response.data))
            .then((error) => console.log(error));
        }

        function load_items(){
            //Make all inventory items pickupable:
            for (let i in pickupable_item_ids){
                var element = null;
                try{
                    element = document.getElementById(pickupable_item_ids[i]);
                }catch(error){}
                if(element){
                    element.addEventListener("click", () => {
                        pickup(pickupable_item_ids[i]);
                    });
                }
            }
            
            //Make all puzzles work:
            for (let key in item_activation_dict){

                //Check if the item's in the scene:
                var puzzle = null;
                try{
                    puzzle = document.getElementById(item_activation_dict[key][0])
                }catch(error){}

                //If it's in the scene, add an event listener for clicking on the puzzle:
                if(puzzle){
                    puzzle.addEventListener("click", (event) => {
                        if (current_active_item == key){ //If the user has the correct item to solve the puzzle:
                            //Call all the functions that happen when the puzzle is solved:
                            for (let index in item_activation_dict[key][1]){ 
                                eval(item_activation_dict[key][1][index]);
                            }
                            update_progress(key);
                            //INVENTORY TODO: update the inventory status of the item with the 'key' id to be 'disabled', 
                            //then update the database with this new status.
                        }
                    });
                }
            }
            
            
            /*TODO: 

            Make the functions: 
                -increment_dough_counter()
                    :
                        -add 1 to the internal counter, once the counter reaches 3 change scene to scene2_2. 
                        -Once the increment is 1
                        -change the '0/3' dough_counter_text to reflect counter
                
                -increment_cookie_in_pan()
                    : 

                -increment_cookie_cutout()
                    : 

                -increment_potion_counter() 
                    : 
                        -add 1 to the internal counter, once the counter reaches 3, show potion_steam and potion 
                        -change the '0/3' potion_counter_text to reflect counter
            */
        }
    
    </script>

    {{{body}}}

    {{> inventory}}

    <script>
        load_items();
    </script>
</div>

{{>footer}}